{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"home/1/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"home/1/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"home/1/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"home/1/#code-blocks","title":"Code Blocks","text":"<pre><code>import tensorflow as tf\n</code></pre> bubble_sort.py<pre><code>def bubble_sort(items):\n    for i in range(len(items)):\n        for j in range(len(items) - 1 - i):\n            if items[j] &gt; items[j + 1]:\n                items[j], items[j + 1] = items[j + 1], items[j]\n</code></pre> <p>try soemthing</p> <pre><code>theme:\n  features:\n    - content.code.annotate # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be written in Markdown.</li> </ol> CC++ <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre>"},{"location":"home/2/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"home/2/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"home/2/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>asddsafsdfds</p> <p>Roshan karande</p>"},{"location":"section/1/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"section/1/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"section/1/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <p>``` plotly {     \"data\": [         {             \"x\": [                 \"giraffes\",                 \"orangutans\",                 \"monkeys\"             ],             \"y\": [                 20,                 14,                 23             ],             \"type\": \"bar\"         }     ] }</p>"},{"location":"section/2/","title":"Mkdocs Plotly Plugin","text":"<p>MkDocs plugin to create interactive charts from data using the declarative plotly's json syntax. </p> <p>Includes supports for mkdocs-material theme features like instant loading and dark color themes.</p>"},{"location":"section/2/#installation","title":"Installation","text":"<p>Install the plugin using <code>pip3</code>:</p> <pre><code>pip install mkdocs-plotly-plugin \n</code></pre> <p>And then add the plugin into <code>plugins</code> and the custome fence</p> <pre><code>plugins:\n  - plotly\n\nmarkdown_extensions:\n  - pymdownx.superfences:\n      custom_fences:\n        - name: plotly\n          class: plotly\n          format: !!python/name:mkdocs_plotly_plugin.fences.fence_plotly\n</code></pre>"},{"location":"section/2/#usage","title":"Usage","text":"<p>You can insert any valid plotly JSON as a codeblock using: <pre><code>``` plotly\n{\n    \"data\": [\n        {\n            \"x\": [\n                \"giraffes\",\n                \"orangutans\",\n                \"monkeys\"\n            ],\n            \"y\": [\n                20,\n                14,\n                23\n            ],\n            \"type\": \"bar\"\n        }\n    ]\n}\n```\n</code></pre></p> <pre><code>{\n    \"data\": [\n        {\n            \"x\": [\n                \"giraffes\",\n                \"orangutans\",\n                \"monkeys\"\n            ],\n            \"y\": [\n                20,\n                14,\n                23\n            ],\n            \"type\": \"bar\"\n        }\n    ]\n}\n</code></pre> <p>This is compatiable with <code>snipplets</code> as well</p> <pre><code>```plotly\n--8&lt;-- \"assets/data.json\"\n```\n</code></pre> <pre><code>\n</code></pre> <p>or you can insert any plotly JSON through URLs</p> <pre><code>```plotly\n{\"file_path\": \"./assets/data.json\"}\n```\n</code></pre> <p><pre><code>{\"file_path\": \"./assets/data.json\"}\n</code></pre> !!!note \"Snipplets vs. file path\"</p> <pre><code>Using `snipplets` will insert the json content into the output HTML file, which is more suitable for smaller datasets. Using `file_path` will fetch the json content once the page is loaded.\n</code></pre> <p>!!!note \"Plotly JSON\"</p> <pre><code>Plotly has its own eco-system for creating charts in most statistical languages. You can output the plot as a json file through `fig.to_json()`.\n</code></pre>"},{"location":"section/2/#options","title":"Options","text":"Option Default Description lib_path Relative path to local <code>plotly.js</code> file, or leave it blank to use CDN. template_default <code>plotly_min</code> template for plotly charts in light mode template_slate <code>plotly_dark_min</code> template for plotly charts in dark mode enable_template True use template to automatically change theme <p>!!! note Plotly templates     Available Plotly templates are <code>[\"plotly\", \"plotly_white\", \"plotly_dark\", \"ggplot2\", \"seaborn\", \"simple_white\", \"none\"]</code>. If you want to customize your own template, you can export it as a JSON file and provide its path in options relative to <code>doc_dir</code>.</p>"}]}